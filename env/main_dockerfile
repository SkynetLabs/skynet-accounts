package main

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"

	"github.com/ory/hydra/jwk"
	"gitlab.com/NebulousLabs/fastrand"
)

// main is used as a helper to generate the necessary environment variables and
// JWKs for accounts.
func main() {
	// Create a JWK file
	jwkF, err := os.Create("jwks.json")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	defer func() {
		jwkF.Close()
	}()

	// Write the JWK to the file
	data, err := generateJWK()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	_, err = jwkF.Write(data)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	err = jwkF.Sync()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	
	// Create a file to write the env vars to
	envF, err := os.Create("env")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	defer func() {
		envF.Close()
	}()

	// Write the two env vars to the file
	_, err = envF.WriteString(fmt.Sprintf("COOKIE_HASH_KEY:%v\n", generateCookieKey()))
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	_, err = envF.WriteString(fmt.Sprintf("COOKIE_ENC_KEY:%v\n", generateCookieKey()))
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	err = envF.Sync()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

// generateCookieKey generates a 32 byte hex encoded string to be used for the
// COOKIE_HASH_KEY or the COOKIE_ENC_KEY
func generateCookieKey() string {
	return hex.EncodeToString(fastrand.Bytes(32))
}

// generateJWK generates a JSON Web Key Set for the accounts system.
//
// The JSON Web Key Set is a set of cryptographic keys used to sign the JSON Web
// Tokens `accounts` issues for its users.  These tokens are used to authorize
// users in front of the service and are required for its operation.
func generateJWK() ([]byte, error) {
	gen := jwk.RS256Generator{
		KeyLength: 2048,
	}
	jwks, err := gen.Generate("", "sig")
	if err != nil {
		return nil, err
	}
	jsonbuf, err := json.MarshalIndent(jwks, "", "  ")
	if err != nil {
		return nil, err
	}
	return jsonbuf, nil
}
